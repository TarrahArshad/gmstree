"use strict";(()=>{var e={};e.id=495,e.ids=[495],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4770:e=>{e.exports=require("crypto")},5592:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>h,patchFetch:()=>f,requestAsyncStorage:()=>c,routeModule:()=>p,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var r={};a.r(r),a.d(r,{GET:()=>d});var s=a(3278),n=a(5002),i=a(4877),o=a(1309),l=a(8713),u=a(3656);async function d(e){let t=new URL(e.url).searchParams.get("initData");if(!t)return o.NextResponse.json({error:"Invalid request"},{status:400});let{validatedData:a,user:r}=(0,u.M)(t);if(!a)return o.NextResponse.json({error:"Invalid Telegram data"},{status:403});let s=r.id?.toString();if(!s)return o.NextResponse.json({error:"Invalid user data"},{status:400});try{let e=await l.Z.user.findUnique({where:{telegramId:s}});if(!e)return o.NextResponse.json({error:"User not found"},{status:404});let t=await l.Z.task.findMany({where:{isActive:!0}}),a=await l.Z.userTask.findMany({where:{userId:e.id,task:{isNot:void 0,isActive:!0}},include:{task:!0}}),r=t.map(e=>{let t=a.find(t=>t.taskId===e.id);return{...e,taskStartTimestamp:t?.taskStartTimestamp||null,isCompleted:t?.isCompleted||!1}});return o.NextResponse.json({tasks:r})}catch(e){return console.error("Error fetching user tasks:",e),o.NextResponse.json({error:"Failed to fetch user tasks"},{status:500})}}let p=new s.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/tasks/route",pathname:"/api/tasks",filename:"route",bundlePath:"app/api/tasks/route"},resolvedPagePath:"D:\\Projects\\GMSTree\\Gmstree-master for dev\\Gmstree-master\\app\\api\\tasks\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:c,staticGenerationAsyncStorage:m,serverHooks:g}=p,h="/api/tasks/route";function f(){return(0,i.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}},8713:(e,t,a)=>{a.d(t,{Z:()=>s});var r=a(3524);let s=globalThis.prisma??new r.PrismaClient},3656:(e,t,a)=>{a.d(t,{M:()=>n});var r=a(4770),s=a.n(r);function n(e){let t=process.env.BOT_TOKEN,a="true"===process.env.BYPASS_TELEGRAM_AUTH;console.log("validateTelegramWebAppData"),console.log("telegramInitData",e);let r=null,n={},i="";if(a)r={temp:""},n={id:"undefined",username:"Unknown User"},i="Authentication bypassed for development";else{if(!t)return{message:"BOT_TOKEN is not set",validatedData:null,user:{}};let a=new URLSearchParams(e),o=a.get("hash");if(!o)return{message:"Hash is missing from initData",validatedData:null,user:{}};a.delete("hash");let l=a.get("auth_date");if(!l)return{message:"auth_date is missing from initData",validatedData:null,user:{}};let u=parseInt(l,10);if(Math.floor(Date.now()/1e3)-u>10800)return{message:"Telegram data is older than 3 hours",validatedData:null,user:{}};let d=Array.from(a.entries()).sort(([e],[t])=>e.localeCompare(t)).map(([e,t])=>`${e}=${t}`).join("\n");console.log("Data Check String:",d);let p=s().createHmac("sha256","WebAppData").update(t).digest(),c=s().createHmac("sha256",p).update(d).digest("hex");if(console.log("Calculated Hash:",c),console.log("Received Hash:",o),c===o){r=Object.fromEntries(a.entries()),i="Validation successful";let e=r.user;if(e)try{n=JSON.parse(e),console.log("Parsed user data:",n)}catch(e){console.error("Error parsing user data:",e),i="Error parsing user data",r=null}else i="User data is missing",r=null}else console.log(i="Hash validation failed")}return{validatedData:r,user:n,message:i}}}};var t=require("../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[379,833],()=>a(5592));module.exports=r})();