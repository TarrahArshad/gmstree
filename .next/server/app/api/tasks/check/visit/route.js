"use strict";(()=>{var e={};e.id=998,e.ids=[998],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4770:e=>{e.exports=require("crypto")},3359:(e,t,r)=>{r.r(t),r.d(t,{originalPathname:()=>f,patchFetch:()=>w,requestAsyncStorage:()=>m,routeModule:()=>l,serverHooks:()=>h,staticGenerationAsyncStorage:()=>k});var s={};r.r(s),r.d(s,{POST:()=>c});var a=r(3278),i=r(5002),o=r(4877),n=r(1309),u=r(8713),d=r(3656),p=r(9495);async function c(e){let{initData:t,taskId:r}=await e.json();if(!t||!r)return n.NextResponse.json({error:"Invalid request"},{status:400});let{validatedData:s,user:a}=(0,d.M)(t);if(!s)return n.NextResponse.json({error:"Invalid Telegram data"},{status:403});let i=a.id?.toString();if(!i)return n.NextResponse.json({error:"Invalid user data"},{status:400});try{let e=await u.Z.$transaction(async e=>{let t=await e.user.findUnique({where:{telegramId:i}});if(!t)throw Error("User not found");let s=await e.task.findUnique({where:{id:r}});if(!s)throw Error("Task not found");if(!s.isActive)throw Error("This task is no longer active");if("VISIT"!==s.type||!s.taskData)throw Error("Invalid task type or missing task data for this operation");if("number"!=typeof p.ku)throw Error("Invalid timeToWait in task data");let a=await e.userTask.findUnique({where:{userId_taskId:{userId:t.id,taskId:s.id}}});if(!a)throw Error("Task not started");if(a.isCompleted)throw Error("Task already completed");let o=new Date(a.taskStartTimestamp.getTime()+p.ku);if(new Date<o){let e=Math.ceil((o.getTime()-Date.now())/1e3);return{success:!1,message:`Not enough time has passed. Please wait ${e} more seconds.`,remainingTime:e}}let n=await e.userTask.update({where:{id:a.id},data:{isCompleted:!0}});return await e.user.update({where:{id:t.id},data:{points:{increment:s.points},pointsBalance:{increment:s.points}}}),{success:!0,message:"Task completed successfully",isCompleted:n.isCompleted}});return n.NextResponse.json(e)}catch(e){return console.error("Error checking visit task:",e),n.NextResponse.json({success:!1,error:e instanceof Error?e.message:"Failed to check visit task"},{status:500})}}let l=new a.AppRouteRouteModule({definition:{kind:i.x.APP_ROUTE,page:"/api/tasks/check/visit/route",pathname:"/api/tasks/check/visit",filename:"route",bundlePath:"app/api/tasks/check/visit/route"},resolvedPagePath:"D:\\Projects\\GMSTree\\Gmstree-master for dev\\Gmstree-master\\app\\api\\tasks\\check\\visit\\route.ts",nextConfigOutput:"",userland:s}),{requestAsyncStorage:m,staticGenerationAsyncStorage:k,serverHooks:h}=l,f="/api/tasks/check/visit/route";function w(){return(0,o.patchFetch)({serverHooks:h,staticGenerationAsyncStorage:k})}}};var t=require("../../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),s=t.X(0,[379,833,563],()=>r(3359));module.exports=s})();