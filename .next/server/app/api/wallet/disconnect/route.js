"use strict";(()=>{var e={};e.id=682,e.ids=[682],e.modules={3524:e=>{e.exports=require("@prisma/client")},399:e=>{e.exports=require("next/dist/compiled/next-server/app-page.runtime.prod.js")},517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},4770:e=>{e.exports=require("crypto")},703:(e,t,a)=>{a.r(t),a.d(t,{originalPathname:()=>h,patchFetch:()=>f,requestAsyncStorage:()=>p,routeModule:()=>c,serverHooks:()=>g,staticGenerationAsyncStorage:()=>m});var r={};a.r(r),a.d(r,{POST:()=>d});var s=a(3278),n=a(5002),o=a(4877),i=a(1309),l=a(8713),u=a(3656);async function d(e){let{initData:t}=await e.json();if(!t)return i.NextResponse.json({error:"Invalid request"},{status:400});let{validatedData:a,user:r}=(0,u.M)(t);if(!a)return i.NextResponse.json({error:"Invalid Telegram data"},{status:403});let s=r.id?.toString();if(!s)return i.NextResponse.json({error:"Invalid user data"},{status:400});try{return await l.Z.user.update({where:{telegramId:s},data:{tonWalletAddress:null}}),i.NextResponse.json({success:!0,message:"Wallet disconnected successfully"})}catch(e){return console.error("Error disconnecting wallet:",e),i.NextResponse.json({error:"Failed to disconnect wallet"},{status:500})}}let c=new s.AppRouteRouteModule({definition:{kind:n.x.APP_ROUTE,page:"/api/wallet/disconnect/route",pathname:"/api/wallet/disconnect",filename:"route",bundlePath:"app/api/wallet/disconnect/route"},resolvedPagePath:"D:\\Projects\\GMSTree\\Gmstree-master for dev\\Gmstree-master\\app\\api\\wallet\\disconnect\\route.ts",nextConfigOutput:"",userland:r}),{requestAsyncStorage:p,staticGenerationAsyncStorage:m,serverHooks:g}=c,h="/api/wallet/disconnect/route";function f(){return(0,o.patchFetch)({serverHooks:g,staticGenerationAsyncStorage:m})}},8713:(e,t,a)=>{a.d(t,{Z:()=>s});var r=a(3524);let s=globalThis.prisma??new r.PrismaClient},3656:(e,t,a)=>{a.d(t,{M:()=>n});var r=a(4770),s=a.n(r);function n(e){let t=process.env.BOT_TOKEN,a="true"===process.env.BYPASS_TELEGRAM_AUTH;console.log("validateTelegramWebAppData"),console.log("telegramInitData",e);let r=null,n={},o="";if(a)r={temp:""},n={id:"undefined",username:"Unknown User"},o="Authentication bypassed for development";else{if(!t)return{message:"BOT_TOKEN is not set",validatedData:null,user:{}};let a=new URLSearchParams(e),i=a.get("hash");if(!i)return{message:"Hash is missing from initData",validatedData:null,user:{}};a.delete("hash");let l=a.get("auth_date");if(!l)return{message:"auth_date is missing from initData",validatedData:null,user:{}};let u=parseInt(l,10);if(Math.floor(Date.now()/1e3)-u>10800)return{message:"Telegram data is older than 3 hours",validatedData:null,user:{}};let d=Array.from(a.entries()).sort(([e],[t])=>e.localeCompare(t)).map(([e,t])=>`${e}=${t}`).join("\n");console.log("Data Check String:",d);let c=s().createHmac("sha256","WebAppData").update(t).digest(),p=s().createHmac("sha256",c).update(d).digest("hex");if(console.log("Calculated Hash:",p),console.log("Received Hash:",i),p===i){r=Object.fromEntries(a.entries()),o="Validation successful";let e=r.user;if(e)try{n=JSON.parse(e),console.log("Parsed user data:",n)}catch(e){console.error("Error parsing user data:",e),o="Error parsing user data",r=null}else o="User data is missing",r=null}else console.log(o="Hash validation failed")}return{validatedData:r,user:n,message:o}}}};var t=require("../../../../webpack-runtime.js");t.C(e);var a=e=>t(t.s=e),r=t.X(0,[379,833],()=>a(703));module.exports=r})();